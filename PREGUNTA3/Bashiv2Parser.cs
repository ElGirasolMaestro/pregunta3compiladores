//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/USUARIO/Desktop/design-and-implementation-of-your-own-shell-main/Bashiv2.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Bashiv2Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, WORD=23, ARG=24, STRING=25, 
		NUMBER=26, WS=27, NEWLINE=28, COMMENT=29;
	public const int
		RULE_script = 0, RULE_statement = 1, RULE_command = 2, RULE_simpleCommand = 3, 
		RULE_ifCommand = 4, RULE_switchCommand = 5, RULE_switchCases = 6, RULE_loop = 7, 
		RULE_assignment = 8, RULE_listDeclaration = 9, RULE_condition = 10, RULE_expression = 11, 
		RULE_simpleExpression = 12, RULE_variable = 13;
	public static readonly string[] ruleNames = {
		"script", "statement", "command", "simpleCommand", "ifCommand", "switchCommand", 
		"switchCases", "loop", "assignment", "listDeclaration", "condition", "expression", 
		"simpleExpression", "variable"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'then'", "'else'", "'fi'", "'switch'", "'in'", "'{'", "'}'", 
		"'esac'", "'case'", "':'", "'for'", "','", "'do'", "'done'", "'while'", 
		"'='", "'('", "')'", "'&&'", "'||'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "WORD", 
		"ARG", "STRING", "NUMBER", "WS", "NEWLINE", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Bashiv2.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Bashiv2Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Bashiv2Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Bashiv2Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 545329186L) != 0)) {
				{
				{
				State = 28;
				statement();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListDeclarationContext listDeclaration() {
			return GetRuleContext<ListDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(Bashiv2Parser.COMMENT, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				command();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35;
				loop();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 36;
				assignment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 37;
				listDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 38;
				Match(COMMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleCommandContext simpleCommand() {
			return GetRuleContext<SimpleCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfCommandContext ifCommand() {
			return GetRuleContext<IfCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCommandContext switchCommand() {
			return GetRuleContext<SwitchCommandContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 4, RULE_command);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 41;
				simpleCommand();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 42;
				ifCommand();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 43;
				switchCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(Bashiv2Parser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARG() { return GetTokens(Bashiv2Parser.ARG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARG(int i) {
			return GetToken(Bashiv2Parser.ARG, i);
		}
		public SimpleCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleCommandContext simpleCommand() {
		SimpleCommandContext _localctx = new SimpleCommandContext(Context, State);
		EnterRule(_localctx, 6, RULE_simpleCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(WORD);
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARG) {
				{
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 47;
					Match(ARG);
					}
					}
					State = 50;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ARG );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext[] script() {
			return GetRuleContexts<ScriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script(int i) {
			return GetRuleContext<ScriptContext>(i);
		}
		public IfCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfCommandContext ifCommand() {
		IfCommandContext _localctx = new IfCommandContext(Context, State);
		EnterRule(_localctx, 8, RULE_ifCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(T__0);
			State = 55;
			condition();
			State = 56;
			Match(T__1);
			State = 57;
			script();
			State = 58;
			Match(T__2);
			State = 59;
			script();
			State = 60;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(Bashiv2Parser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCasesContext[] switchCases() {
			return GetRuleContexts<SwitchCasesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCasesContext switchCases(int i) {
			return GetRuleContext<SwitchCasesContext>(i);
		}
		public SwitchCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCommandContext switchCommand() {
		SwitchCommandContext _localctx = new SwitchCommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_switchCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(T__4);
			State = 63;
			Match(WORD);
			State = 64;
			Match(T__5);
			State = 65;
			Match(T__6);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 66;
				switchCases();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 72;
			Match(T__7);
			State = 73;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCasesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(Bashiv2Parser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(Bashiv2Parser.NUMBER, 0); }
		public SwitchCasesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCases; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCases(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCasesContext switchCases() {
		SwitchCasesContext _localctx = new SwitchCasesContext(Context, State);
		EnterRule(_localctx, 12, RULE_switchCases);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(T__9);
			State = 76;
			_la = TokenStream.LA(1);
			if ( !(_la==WORD || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 77;
			Match(T__10);
			State = 78;
			script();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(Bashiv2Parser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(Bashiv2Parser.WORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 14, RULE_loop);
		int _la;
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				Match(T__11);
				State = 81;
				Match(WORD);
				State = 82;
				Match(T__5);
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORD) {
					{
					State = 83;
					Match(WORD);
					State = 88;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__12) {
						{
						{
						State = 84;
						Match(T__12);
						State = 85;
						Match(WORD);
						}
						}
						State = 90;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 93;
				Match(T__13);
				State = 94;
				script();
				State = 95;
				Match(T__14);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				Match(T__15);
				State = 98;
				condition();
				State = 99;
				Match(T__13);
				State = 100;
				script();
				State = 101;
				Match(T__14);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(Bashiv2Parser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(Bashiv2Parser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(Bashiv2Parser.WS, i);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(WORD);
			State = 106;
			Match(T__16);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 107;
				Match(WS);
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 113;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(Bashiv2Parser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(Bashiv2Parser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(Bashiv2Parser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDeclarationContext listDeclaration() {
		ListDeclarationContext _localctx = new ListDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_listDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(WORD);
			State = 116;
			Match(T__16);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 117;
				Match(WS);
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 123;
			Match(T__17);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 96468992L) != 0)) {
				{
				State = 124;
				expression(0);
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__12) {
					{
					{
					State = 125;
					Match(T__12);
					State = 126;
					expression(0);
					}
					}
					State = 131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 134;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(Bashiv2Parser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_condition);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				Match(WORD);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 141;
			simpleExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 151;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 149;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 143;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 144;
						Match(T__19);
						State = 145;
						expression(3);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 146;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 147;
						Match(T__20);
						State = 148;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
	 
		public SimpleExpressionContext() { }
		public virtual void CopyFrom(SimpleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WordContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(Bashiv2Parser.WORD, 0); }
		public WordContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWord(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(Bashiv2Parser.NUMBER, 0); }
		public NumberContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VarContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArgContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARG() { return GetToken(Bashiv2Parser.ARG, 0); }
		public ArgContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_simpleExpression);
		try {
			State = 158;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORD:
				_localctx = new WordContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				Match(WORD);
				}
				break;
			case ARG:
				_localctx = new ArgContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 155;
				Match(ARG);
				}
				break;
			case NUMBER:
				_localctx = new NumberContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 156;
				Match(NUMBER);
				}
				break;
			case T__21:
				_localctx = new VarContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 157;
				variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(Bashiv2Parser.WORD, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBashiv2Visitor<TResult> typedVisitor = visitor as IBashiv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 26, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(T__21);
			State = 161;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,29,164,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,5,0,30,
		8,0,10,0,12,0,33,9,0,1,1,1,1,1,1,1,1,1,1,3,1,40,8,1,1,2,1,2,1,2,3,2,45,
		8,2,1,3,1,3,4,3,49,8,3,11,3,12,3,50,3,3,53,8,3,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,5,1,5,1,5,1,5,1,5,5,5,68,8,5,10,5,12,5,71,9,5,1,5,1,5,1,5,1,
		6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,87,8,7,10,7,12,7,90,9,7,
		3,7,92,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,104,8,7,1,8,1,8,
		1,8,5,8,109,8,8,10,8,12,8,112,9,8,1,8,1,8,1,9,1,9,1,9,5,9,119,8,9,10,9,
		12,9,122,9,9,1,9,1,9,1,9,1,9,5,9,128,8,9,10,9,12,9,131,9,9,3,9,133,8,9,
		1,9,1,9,1,10,1,10,3,10,139,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,5,11,150,8,11,10,11,12,11,153,9,11,1,12,1,12,1,12,1,12,3,12,159,8,
		12,1,13,1,13,1,13,1,13,0,1,22,14,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		0,1,2,0,23,23,26,26,172,0,31,1,0,0,0,2,39,1,0,0,0,4,44,1,0,0,0,6,46,1,
		0,0,0,8,54,1,0,0,0,10,62,1,0,0,0,12,75,1,0,0,0,14,103,1,0,0,0,16,105,1,
		0,0,0,18,115,1,0,0,0,20,138,1,0,0,0,22,140,1,0,0,0,24,158,1,0,0,0,26,160,
		1,0,0,0,28,30,3,2,1,0,29,28,1,0,0,0,30,33,1,0,0,0,31,29,1,0,0,0,31,32,
		1,0,0,0,32,1,1,0,0,0,33,31,1,0,0,0,34,40,3,4,2,0,35,40,3,14,7,0,36,40,
		3,16,8,0,37,40,3,18,9,0,38,40,5,29,0,0,39,34,1,0,0,0,39,35,1,0,0,0,39,
		36,1,0,0,0,39,37,1,0,0,0,39,38,1,0,0,0,40,3,1,0,0,0,41,45,3,6,3,0,42,45,
		3,8,4,0,43,45,3,10,5,0,44,41,1,0,0,0,44,42,1,0,0,0,44,43,1,0,0,0,45,5,
		1,0,0,0,46,52,5,23,0,0,47,49,5,24,0,0,48,47,1,0,0,0,49,50,1,0,0,0,50,48,
		1,0,0,0,50,51,1,0,0,0,51,53,1,0,0,0,52,48,1,0,0,0,52,53,1,0,0,0,53,7,1,
		0,0,0,54,55,5,1,0,0,55,56,3,20,10,0,56,57,5,2,0,0,57,58,3,0,0,0,58,59,
		5,3,0,0,59,60,3,0,0,0,60,61,5,4,0,0,61,9,1,0,0,0,62,63,5,5,0,0,63,64,5,
		23,0,0,64,65,5,6,0,0,65,69,5,7,0,0,66,68,3,12,6,0,67,66,1,0,0,0,68,71,
		1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,72,1,0,0,0,71,69,1,0,0,0,72,73,
		5,8,0,0,73,74,5,9,0,0,74,11,1,0,0,0,75,76,5,10,0,0,76,77,7,0,0,0,77,78,
		5,11,0,0,78,79,3,0,0,0,79,13,1,0,0,0,80,81,5,12,0,0,81,82,5,23,0,0,82,
		91,5,6,0,0,83,88,5,23,0,0,84,85,5,13,0,0,85,87,5,23,0,0,86,84,1,0,0,0,
		87,90,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,
		91,83,1,0,0,0,91,92,1,0,0,0,92,93,1,0,0,0,93,94,5,14,0,0,94,95,3,0,0,0,
		95,96,5,15,0,0,96,104,1,0,0,0,97,98,5,16,0,0,98,99,3,20,10,0,99,100,5,
		14,0,0,100,101,3,0,0,0,101,102,5,15,0,0,102,104,1,0,0,0,103,80,1,0,0,0,
		103,97,1,0,0,0,104,15,1,0,0,0,105,106,5,23,0,0,106,110,5,17,0,0,107,109,
		5,27,0,0,108,107,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,
		0,111,113,1,0,0,0,112,110,1,0,0,0,113,114,3,22,11,0,114,17,1,0,0,0,115,
		116,5,23,0,0,116,120,5,17,0,0,117,119,5,27,0,0,118,117,1,0,0,0,119,122,
		1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,123,1,0,0,0,122,120,1,0,0,
		0,123,132,5,18,0,0,124,129,3,22,11,0,125,126,5,13,0,0,126,128,3,22,11,
		0,127,125,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,
		133,1,0,0,0,131,129,1,0,0,0,132,124,1,0,0,0,132,133,1,0,0,0,133,134,1,
		0,0,0,134,135,5,19,0,0,135,19,1,0,0,0,136,139,5,23,0,0,137,139,3,22,11,
		0,138,136,1,0,0,0,138,137,1,0,0,0,139,21,1,0,0,0,140,141,6,11,-1,0,141,
		142,3,24,12,0,142,151,1,0,0,0,143,144,10,2,0,0,144,145,5,20,0,0,145,150,
		3,22,11,3,146,147,10,1,0,0,147,148,5,21,0,0,148,150,3,22,11,2,149,143,
		1,0,0,0,149,146,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,
		0,152,23,1,0,0,0,153,151,1,0,0,0,154,159,5,23,0,0,155,159,5,24,0,0,156,
		159,5,26,0,0,157,159,3,26,13,0,158,154,1,0,0,0,158,155,1,0,0,0,158,156,
		1,0,0,0,158,157,1,0,0,0,159,25,1,0,0,0,160,161,5,22,0,0,161,162,5,23,0,
		0,162,27,1,0,0,0,17,31,39,44,50,52,69,88,91,103,110,120,129,132,138,149,
		151,158
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
